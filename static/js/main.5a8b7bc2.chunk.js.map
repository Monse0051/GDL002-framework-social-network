{"version":3,"sources":["Constants/routes.js","Components/LoginPage.js","Constants/config.js","Components/Navbar.js","Components/Post.js","Components/HomePage.js","Components/SignUpPage.js","Components/FriendsPage.js","Components/MyAccountPage.js","App.js","serviceWorker.js","index.js"],"names":["HOME_PAGE","INITIAL_STATE","email","password","error","LoginPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","_this$state","state","firebase","auth","signInWithEmailAndPassword","then","setState","objectSpread","history","push","ROUTES","console","log","catch","preventDefault","onChange","defineProperty","target","name","value","_this$state2","isInvalid","react_default","a","createElement","className","type","placeholder","disabled","message","react_router_dom","to","React","Component","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Navbar","Post","date","Date","toDateString","mail","msg","HomePage","database","postList","postMessage","public","onPost","bind","assertThisInitialized","onChangePost","onSetPrivacity","_this2","apps","length","initializeApp","CONFIG","app","firestore","postQueryRef","collection","where","orderBy","newPostList","get","querySnapshoot","forEach","doc","post","data","now","toString","set","src_Components_Navbar","rows","cols","onClick","map","Components_Post","username","passwordOne","passwordTwo","ERROR_CODE_ACCOUNT_EXISTS","ERROR_MSG_ACCOUNT_EXISTS","SignUpPage","createUserWithEmailAndPassword","code","onChangeCheckbox","checked","FriendsPage","MyAccountPage","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a8b7bc2.chunk.js","sourcesContent":["export const LANDING = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const HOME_PAGE = '/home';\r\nexport const FRIENDS_PAGE = '/friends';\r\nexport const MY_ACCOUNT_PAGE = '/myaccount';\r\nexport const ADMIN = '/admin';\r\nexport const ADMIN_DETAILS = '/admin/:id';","import React from 'react';\r\nimport firebase from 'firebase';\r\nimport * as ROUTES from '../Constants/routes';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst INITIAL_STATE = {\r\n    email: '',\r\n    password: '',\r\n    error: null,\r\n  };\r\n\r\nclass LoginPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.firebase = firebase;\r\n\r\n        this.state = {...INITIAL_STATE};\r\n    }\r\n\r\n\r\n    onSubmit = event => {\r\n        const { email, password } = this.state;\r\n        \r\n        this.firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\r\n            this.setState({ ...INITIAL_STATE });\r\n            this.props.history.push(ROUTES.HOME_PAGE);\r\n            console.log(\"DEBUG_MSG: authenticated!\");\r\n          })\r\n          .catch(error => {\r\n            this.setState({ error });\r\n            console.log(\"DEBUG_MSG: error to auth\");\r\n            console.log(error);\r\n          });\r\n    \r\n        event.preventDefault();\r\n      };\r\n\r\n    onChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    render(){\r\n        const { email, password, error } = this.state;\r\n\r\n        const isInvalid = password === '' || email === '';\r\n    \r\n      return (\r\n        <div className=\"login-page\">\r\n          <div className=\"login-section\">\r\n            <form onSubmit={this.onSubmit} >\r\n              <input className = \"input-email\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={this.onChange}\r\n                type=\"text\"\r\n                placeholder=\"Email Address\"\r\n              />  \r\n              <input className = \"input-password\"\r\n                name=\"password\" \r\n                value={password}\r\n                onChange={this.onChange}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              /> \r\n              <button className = \"signin-button\" disabled={isInvalid} type=\"submit\">\r\n                Sign In\r\n            </button>\r\n\r\n              {error && <p>{error.message}</p>}\r\n            </form>\r\n          </div>\r\n          <div className=\"signup-section\">\r\n              <p>Don't you have an account?</p> \r\n              <Link className=\"singup-button\" to={ROUTES.SIGN_UP}>Sign up</Link>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default LoginPage;"," // Your web app's Firebase configuration\r\n export const firebaseConfig = {\r\n    apiKey: \"AIzaSyCmt7a6vfZ7MhNJyhcnxhjrhPbSQ_M68Wc\",\r\n    authDomain: \"react-social-network-85607.firebaseapp.com\",\r\n    databaseURL: \"https://react-social-network-85607.firebaseio.com\",\r\n    projectId: \"react-social-network-85607\",\r\n    storageBucket: \"react-social-network-85607.appspot.com\",\r\n    messagingSenderId: \"351547157737\",\r\n    appId: \"1:351547157737:web:cfd6714f5ee45501\"\r\n  };","import React from 'react';\r\nimport * as ROUTES from '../Constants/routes'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Navbar = () => (\r\n    <nav>\r\n        <h2 className= \"logo-link\">Women in Code</h2>\r\n        <ul className= \"nav-views\">\r\n        <li><Link className= \"nav-views__link\" to= {ROUTES.HOME_PAGE}>Home </Link> </li>\r\n        <li><Link className= \"nav-views__link\" to= {ROUTES.FRIENDS_PAGE}>Friends </Link></li>\r\n        <li><Link className= \"nav-views__link\" to= {ROUTES.MY_ACCOUNT_PAGE}>My account </Link></li>\r\n        <li><Link className=\"logout-button\" to=\"/\">Log Out</Link></li>\r\n        </ul>\r\n        \r\n    </nav>\r\n\r\n);\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport firebase from 'firebase';\r\nimport * as CONFIG from '../Constants/config';\r\n\r\nclass Post extends React.Component{\r\n\r\n    render() {\r\n        let date = new Date(this.props.date).toDateString();\r\n        return (\r\n            <div>\r\n                <p>{this.props.mail}</p>\r\n                <p>{date}</p>\r\n                <p>{this.props.msg}</p>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport firebase from 'firebase';\r\nimport * as CONFIG from '../Constants/config';\r\nimport Navbar from '../Components/Navbar';\r\nimport Post from './Post';\r\n\r\nclass HomePage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.firebase = firebase;\r\n        this.database = null;\r\n\r\n        this.state = {\r\n            postList: [],\r\n            postMessage: \"\",\r\n            public: false\r\n        };\r\n\r\n        this.onPost = this.onPost.bind(this);\r\n        this.onChangePost = this.onChangePost.bind(this);\r\n        this.onSetPrivacity = this.onSetPrivacity.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // if firebase app not initialized, then initialize\r\n        if (this.firebase.apps.length === 0) {\r\n            this.firebase.initializeApp(CONFIG.firebaseConfig);\r\n        }\r\n        const app = this.firebase.app();\r\n        this.database = app.firestore();\r\n\r\n        let postRef = this.database.collection(\"posts\");\r\n        let postQueryRef = postRef.where(\"public\", \"==\", true);\r\n        postQueryRef.orderBy(\"date\", \"asc\");\r\n\r\n        let newPostList = [];\r\n\r\n        postQueryRef.get().then(querySnapshoot => {\r\n            querySnapshoot.forEach(doc => {\r\n                // adding post to a list\r\n                let post = doc.data();\r\n                console.log(\"DEBUG_MSG: post: \", post);\r\n                //let newPostList = this.state.postList;\r\n                newPostList.push(post);\r\n                this.setState({postList: newPostList});\r\n            });\r\n        }).catch(error=>{\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    onPost(){\r\n        console.log(\"posteando...\");\r\n        const post = {\r\n            mail: \"test@gmail.com\",\r\n            date: Date.now(),\r\n            message: this.state.postMessage,\r\n            public: this.state.public\r\n        }\r\n        this.database.collection(\"posts\").doc(Date.now().toString()).set(post);\r\n        let newPostList = this.state.postList;\r\n        newPostList.push(post);\r\n        //TODO: erase post after press button post\r\n        //FIXME: new post should be showed after press button post\r\n    }\r\n\r\n    onChangePost(event) {\r\n        this.setState({ postMessage: event.target.value });\r\n    }\r\n\r\n    onSetPrivacity(event){\r\n        console.log(event.target.value);\r\n        this.setState({public: event.target.value === \"Public\"})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Navbar></Navbar>\r\n                </div>\r\n                <div>\r\n                    <h1>Welcome to the Home Page</h1>\r\n                    <textarea rows=\"4\" cols=\"50\" onChange={this.onChangePost}> </textarea><br></br>\r\n                    <input type=\"radio\" name=\"privacity\" value=\"Public\" \r\n                        onChange={this.onSetPrivacity}/>Public\r\n                    <input type=\"radio\" name=\"privacity\" value=\"Friends\"\r\n                        onChange={this.onSetPrivacity}/>Friends\r\n                    <button onClick={this.onPost}>Post</button>\r\n                </div>\r\n                <div className=\"post-section\">\r\n                    <ul>\r\n                        {this.state.postList.map(post => {\r\n                            return <Post\r\n                                mail={post.mail}\r\n                                date={post.date}\r\n                                msg={post.message}\r\n                                public={post.public}\r\n                            />;\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n   \r\nexport default HomePage;","import React from 'react';\r\nimport firebase from 'firebase';\r\nimport * as ROUTES from '../Constants/routes';\r\n\r\nconst INITIAL_STATE = {\r\n    username: '',\r\n    email: '',\r\n    passwordOne: '',\r\n    passwordTwo: '',\r\n    error: null,\r\n  };\r\n  \r\n  const ERROR_CODE_ACCOUNT_EXISTS = 'auth/email-already-in-use';\r\n  \r\n  const ERROR_MSG_ACCOUNT_EXISTS = `\r\n    An account with this E-Mail address already exists.\r\n    Try to login with this account instead. \r\n  `;\r\n\r\n    class SignUpPage extends React.Component{\r\n        constructor(props) {\r\n          super(props);\r\n          this.firebase = firebase;\r\n          this.state = { ...INITIAL_STATE };\r\n        }\r\n      \r\n        onSubmit = event => {\r\n          const { email, passwordOne} = this.state;\r\n          this.firebase.auth().createUserWithEmailAndPassword(email, passwordOne)\r\n            .then(() => {\r\n              this.setState({ ...INITIAL_STATE });\r\n              this.props.history.push(ROUTES.HOME_PAGE);\r\n            })\r\n            .catch(error => {\r\n              if (error.code === ERROR_CODE_ACCOUNT_EXISTS) {\r\n                error.message = ERROR_MSG_ACCOUNT_EXISTS;\r\n              }\r\n      \r\n              this.setState({ error });\r\n            });\r\n      \r\n          event.preventDefault();\r\n        };\r\n      \r\n        onChange = event => {\r\n          this.setState({ [event.target.name]: event.target.value });\r\n        };\r\n      \r\n        onChangeCheckbox = event => {\r\n          this.setState({ [event.target.name]: event.target.checked });\r\n        };\r\n      \r\n        render() {\r\n          const {\r\n            username,\r\n            email,\r\n            passwordOne,\r\n            passwordTwo,\r\n            error,\r\n          } = this.state;\r\n      \r\n          const isInvalid =\r\n            passwordOne !== passwordTwo ||\r\n            passwordOne === '' ||\r\n            email === '' ||\r\n            username === '';\r\n      \r\n          return (\r\n            <div className=\"signup-page\">   \r\n            <form onSubmit={this.onSubmit}>\r\n              <input className = \"input-signup-username\"\r\n                name=\"username\"\r\n                value={username}\r\n                onChange={this.onChange}\r\n                type=\"text\"\r\n                placeholder=\"Full Name\"\r\n              />\r\n              <input className = \"input-signup-email\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={this.onChange}\r\n                type=\"text\"\r\n                placeholder=\"Email Address\"\r\n              />\r\n              <input className = \"input-signup-passwordOne\"\r\n                name=\"passwordOne\"\r\n                value={passwordOne}\r\n                onChange={this.onChange}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n              <input className = \"input-signup-passwordtwo\"\r\n                name=\"passwordTwo\" \r\n                value={passwordTwo}\r\n                onChange={this.onChange}\r\n                type=\"password\"\r\n                placeholder=\"Confirm Password\"\r\n              />\r\n              <button className = \"signup-form-button\" disabled={isInvalid} type=\"submit\">\r\n                Sign Up\r\n              </button>\r\n      \r\n              {error && <p>{error.message}</p>}\r\n            </form>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n\r\nexport default SignUpPage;","import React from 'react';\r\nimport firebase from 'firebase';\r\nimport Navbar from './Navbar';\r\nimport Post from './Post';\r\nimport * as CONFIG from '../Constants/config';\r\n\r\nclass FriendsPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.firebase = firebase;\r\n        this.database = null;\r\n\r\n        this.state = {postList:[]};\r\n    }\r\n\r\n    componentDidMount(){\r\n        // if firebase app not initialized, then initialize\r\n        if (this.firebase.apps.length === 0) {\r\n            this.firebase.initializeApp(CONFIG.firebaseConfig);\r\n        }\r\n        const app = this.firebase.app();\r\n        this.database = app.firestore();\r\n\r\n        let postRef = this.database.collection(\"posts\");\r\n        let postQueryRef = postRef.where(\"public\", \"==\", false);\r\n        postQueryRef.orderBy(\"date\", \"desc\");\r\n\r\n        let newPostList = [];\r\n\r\n        postQueryRef.get().then(querySnapshoot => {\r\n            querySnapshoot.forEach(doc => {\r\n                // adding post to a list\r\n                let post = doc.data();\r\n                console.log(\"DEBUG_MSG: post: \", post);\r\n                //let newPostList = this.state.postList;\r\n                newPostList.push(post);\r\n                this.setState({postList: newPostList});\r\n            });\r\n        }).catch(error=>{\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Navbar></Navbar>\r\n                </div>\r\n                <div>\r\n                    <h1>Welcome to the FriendsPage</h1>\r\n                </div>\r\n                <div className=\"post-section\">\r\n                    <ul>\r\n                        {this.state.postList.map(post => {\r\n                            return <Post\r\n                                mail={post.mail}\r\n                                date={post.date}\r\n                                msg={post.message}\r\n                                public={post.public}\r\n                            />;\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n   \r\nexport default FriendsPage;","import React from 'react';\r\nimport firebase from 'firebase';\r\nimport * as ROUTES from '../Constants/routes';\r\nimport Navbar from './Navbar';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass  MyAccountPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <div>\r\n                <Navbar></Navbar>\r\n            </div>\r\n            <div>\r\n                <h1>Welcome to your Account</h1>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\n   \r\nexport default MyAccountPage;","import React from 'react';\nimport firebase from 'firebase';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport './Components/Navbar.css';\nimport './Components/LoginPage.css';\nimport LoginPage from './Components/LoginPage';\nimport HomePage from './Components/HomePage';\nimport SignUpPage from './Components/SignUpPage';\nimport FriendsPage from './Components/FriendsPage';\nimport MyAccountPage from './Components/MyAccountPage';\nimport * as ROUTES from './Constants/routes';\nimport * as CONFIG from './Constants/config';\n\nclass App extends React.Component {\n\n  componentDidMount(){\n    // if firebase app not initialized, then initialize\n    if (firebase.apps.length === 0) {\n      firebase.initializeApp(CONFIG.firebaseConfig);\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <HashRouter>     \n          <div>\n            <Route exact path=\"/\" component={LoginPage}></Route>\n            <Route path={ROUTES.SIGN_UP} component={SignUpPage}></Route>\n            <Route path= {ROUTES.HOME_PAGE} component={HomePage}></Route>\n            <Route path= {ROUTES.FRIENDS_PAGE} component={FriendsPage}></Route>\n            <Route path= {ROUTES.MY_ACCOUNT_PAGE} component={MyAccountPage}></Route>\n          </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}